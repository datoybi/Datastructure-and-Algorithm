'''
시간복잡도: 얼마나 빠르게 실행되는지
공간복잡도: 얼마나 많은 저장 공간이 필요한지

좋은 알고리즘은 실행 시간도 짧고, 저장 공간도 적게 쓰는 알고리즘

통상 둘 다를 만족시키기는 어려움
    시간과 공간은 반비례적 경향이 있음
    최근대용량 시스템이 보편화되면서, 공간 복잡도보다는 시간 복잡도가 우선
    그래서! 알고리즘은 시간 복잡도가 중심
        

공간복잡도 (Space Complexity)
    프로그램을 실행 및 완료하는데 필요한 저장공간의 양을 뜻함 
    총 필요 저장 공간
        고정 공간 (알고리즘과 무관한 공간) : 코드 저장 공간, 단순 변수 및 상수 
        가변 공간 (알고리즘 실행과 관련 있는 공간) : 실행 중 동적으로 필요한 공간
        S(P) = c+Sp(n)
            c: 고정공간
            Sp(n): 가변 공간
        
        빅 오 표기법을 생각해볼 때, 고정 공간은 상수이므로 공간 복잡도는 가변 공간에 좌우됨

공간 복잡도 계산
    공간 복잡도 계산은 알고리즘에서 실제 사용되는 저장 공간을 계산하면 됨
    이를 빅 오 표기법으로 표현할 수 있으면 됨
'''

'''
공간복잡도 예제1
    n! 펙토리얼 구하기
        n! = 1x2x3x4.....xn
    공간복잡도는 O(1)
        공간 복잡도 계산은 실제 알고리즘 실행시 사용되는 저장공간을 계산하면 됨

'''
# 실제로 사용하는 변수를 계산하면 됨

def factorial(n):
    fac = 1
    for index in range(2, n+1):
        fac = fac * index
    return fac

print(factorial(3))


'''
공간복잡도 예제2
    n! 펙토리얼 구하기
        n! = 1x2x3x4.....xn
    재귀 함수를 사용하였으므로, n에 따라, 변수 n이 n개가 만들어지게 됨
        factorial 함수를 재귀 함수로 1까지 호출하였을 경우, n부터 1까지 스텍에 쌓이게 됨
    공간복잡도는 O(n)

'''

def factorial(n):
    if n>1:
        return n * factorial(n-1)
    else:
        return 1
